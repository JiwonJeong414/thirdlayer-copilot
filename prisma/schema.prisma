// prisma/schema.prisma - FIXED VERSION
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql" // or "sqlite", "mysql", etc.
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  uid         String   @unique
  email       String   @unique
  displayName String
  photoURL    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  chats               Chat[]
  driveConnection     DriveConnection?
  documents           Document[]
  documentEmbeddings  DocumentEmbedding[]

  @@map("users")
}

model Chat {
  id        String   @id @default(cuid())
  summary   String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]

  @@map("chats")
}

model Message {
  id          String   @id @default(cuid())
  content     String
  sender      String
  images      String[] @default([])
  timestamp   DateTime @default(now())
  chatId      String
  
  // Drive context for messages that reference documents
  driveContext Json? // Store array of {fileId, fileName, similarity}

  // Relations
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model DriveConnection {
  id           String    @id @default(cuid())
  userId       String    @unique
  accessToken  String
  refreshToken String?
  isConnected  Boolean   @default(true)
  connectedAt  DateTime  @default(now())
  lastSyncAt   DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("drive_connections")
}

model DocumentEmbedding {
  id         String   @id @default(cuid())
  fileId     String   // Google Drive file ID
  fileName   String
  content    String   @db.Text
  embedding  Float[]  // Vector embedding
  chunkIndex Int      // Index of chunk within the document
  userId     String
  metadata   Json?    // Store chunk metadata like wordCount, docType, etc.
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // FIXED: Include userId in the unique constraint
  @@unique([fileId, chunkIndex, userId], name: "fileId_chunkIndex_userId")
  @@map("document_embeddings")
}

model Document {
  id          String   @id @default(cuid())
  driveId     String   @unique
  name        String
  mimeType    String
  modifiedTime DateTime
  size        Int?
  webViewLink String?
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}