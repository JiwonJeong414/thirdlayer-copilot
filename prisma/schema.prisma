// prisma/schema.prisma - SELECTIVE CLEANUP (Keep organizationActivity, remove others)
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  uid         String   @unique
  email       String   @unique
  displayName String
  photoURL    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Core Relations (KEPT - These are actively used)
  chats               Chat[]
  driveConnection     DriveConnection?
  documents           Document[]
  documentEmbeddings  DocumentEmbedding[]
  cleanupActivities   CleanupActivity[]
  
  // KEPT: This one is actually used (even if not populated yet)
  organizationActivities OrganizationActivity[]

  @@map("users")
}

model Chat {
  id        String   @id @default(cuid())
  summary   String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]

  @@map("chats")
}

model Message {
  id          String   @id @default(cuid())
  content     String
  sender      String
  images      String[] @default([])
  timestamp   DateTime @default(now())
  chatId      String
  driveContext Json?

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model DriveConnection {
  id           String    @id @default(cuid())
  userId       String    @unique
  accessToken  String
  refreshToken String?
  isConnected  Boolean   @default(true)
  connectedAt  DateTime  @default(now())
  lastSyncAt   DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("drive_connections")
}

model DocumentEmbedding {
  id         String   @id @default(cuid())
  fileId     String
  fileName   String
  content    String   @db.Text
  embedding  Float[]
  chunkIndex Int
  userId     String
  metadata   Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([fileId, chunkIndex, userId], name: "fileId_chunkIndex_userId")
  @@map("document_embeddings")
}

model Document {
  id          String   @id @default(cuid())
  driveId     String   @unique
  name        String
  mimeType    String
  modifiedTime DateTime
  size        Int?
  webViewLink String?
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}

model CleanupActivity {
  id               String    @id @default(cuid())
  userId           String
  filesDeleted     Int
  filesRequested   Int
  errors           Int
  deletedFileNames String[]
  timestamp        DateTime  @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("cleanup_activities")
}

// KEPT: Actually used in analytics (but needs logging implementation)
model OrganizationActivity {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  clusterName String   @map("cluster_name") @db.VarChar(255)
  folderName  String   @map("folder_name") @db.VarChar(255)
  filesMoved  Int      @default(0) @map("files_moved")
  method      String   @db.VarChar(50) // 'clustering', 'folders', 'hybrid'
  confidence  Float?   // AI confidence score 0.0-1.0
  metadata    Json?    // Store cluster details, keywords, etc.
  timestamp   DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, timestamp])
  @@index([method])
  @@index([timestamp])
  @@map("organization_activity")
}